[
  {
    "filePath": "addImagePaths.js",
    "contents": "import fs from 'fs';\nimport path from 'path';\n\n// Read the modified_skus.json file and store the skus in an array\nconst originalImageSkus = JSON.parse(fs.readFileSync('original_image_skus.json', 'utf8'));\n\n// Set the constants for both functions\nconst extensions = ['.png', '.jpg', '.jpeg', '.PNG', '.jpeg', '.JPEG', '.JPG'];\nconst croppedFolder = 'cropped_images';\nconst originalFolder = 'original_images';\nconst lifestyleFolder = 'lifestyle_images';\nconst packagingFolder = 'packaging_images';\n\nfunction addVariantImages(variant) {\n  const sku = variant.sku;\n  const [subfolder1, subfolder2] = sku.split('-');\n  const basePath = originalImageSkus.includes(variant.sku) ? originalFolder : croppedFolder;\n\n  for (let i = 1; i <= 4; i++) {\n    for (const ext of extensions) {\n      const imageFileName = i === 1 ? `${sku}${ext}` : `${sku}-${i}${ext}`;\n      const imagePath = path.join(basePath, subfolder1, subfolder2, imageFileName);\n\n      if (fs.existsSync(imagePath)) {\n        variant.images.push(imagePath);\n        break;\n      }\n    }\n  }\n};\n\nfunction addProductImages(product) {\n  if (!product.images) {\n    product.images = [];\n  }\n  // Check for and add the Lifestyle image\n  const lifestyleImagePath = getAdditionalImagePath(product, lifestyleFolder);\n  if (lifestyleImagePath) {\n    product.hasLifestyleImage = true;\n    product.images.push(lifestyleImagePath);\n\n    // check if the image is a jpg format\n    const jpgRegex = /\\.(jpg|jpeg)$/i;\n\n    if (jpgRegex.test(lifestyleImagePath)) {\n      product.hasJpgImage = true;\n    }\n  }\n  \n  // Check for and add the Packaging image\n  const packagingImagePath = getAdditionalImagePath(product, packagingFolder);\n  if (packagingImagePath) {\n    product.hasPackagingImage = true;\n    product.images.push(packagingImagePath);\n  }\n};\n\nfunction getAdditionalImagePath(product, folder) {\n  const [subfolder1, subfolder2] = product.sku.split('-');\n  const baseSku = `${subfolder1}-${subfolder2}`;\n\n  for (let i = 1; i <= 2; i++) {\n    for (const ext of extensions) {\n      const productImageName = i === 1 ? `${baseSku}${ext}` : `${baseSku}-${i}${ext}`;\n      const imagePath = path.join(folder, subfolder1, productImageName);\n\n      if (fs.existsSync(imagePath)) {\n        return imagePath;\n      }\n    }\n  }\n  return false;\n};\n\nexport { addProductImages, addVariantImages };"
  },
  {
    "filePath": "catalog_generator.js",
    "contents": "import fs from 'fs';\nimport csvParser from 'csv-parser';\n\nimport { createPages } from './createPages.js';\nimport { compiledPageTemplate } from './compileTemplates.js';\nimport { groupProductsWithVariants } from './groupProductsWithVariants.js';\nimport { renameProperties } from './renameProperties.js';\nimport { filterOnlineOrderingProducts } from './filterOnlineOrderingProducts.js';\nimport { summary_generator } from './summary_generator.js';\n\n// Prepare the summary JSON file\nsummary_generator();\n\n// Read and parse the CSV file\nconst csvData = [];\nfs.createReadStream('products.csv')\n  .pipe(csvParser())\n  .on('data', (row) => {\n    csvData.push(row);\n  })\n  .on('end', () => {\n    const products = processData(csvData);\n    const productsWithVariants = groupProductsWithVariants(products);\n    const html = generateHtml(productsWithVariants);\n    fs.writeFileSync('catalog.html', html);\n    console.log('Catalog generated successfully.');\n  });\n\n// Process the CSV data and create a product list\nfunction processData(csvData) {\n    let products = csvData.map(obj => renameProperties(obj));\n    const catalogProducts = filterOnlineOrderingProducts(products);\n    return catalogProducts;\n}\n\n// Generate the final HTML\nfunction generateHtml(products) {\n  const pages = createPages(products);\n  return compiledPageTemplate({ pages });\n}\n\n"
  },
  {
    "filePath": "compileTemplates.js",
    "contents": "import Handlebars from 'handlebars';\nimport { \n  lifestyleBgColorHelper,\n  productBgColorHelper\n  } from './helpers/backgroundColorHelper.js';\n\nHandlebars.registerHelper('lifestyleBgColor', lifestyleBgColorHelper);\nHandlebars.registerHelper('productBgColor', productBgColorHelper);\n\n// Define the HTML templates\nconst pageTemplate = `\n<!doctype html>\n<html>\n<head>\n  <link rel=\"stylesheet\" type=\"text/css\"  href=\"views/css/pageContent.css\">\n  <link rel=\"stylesheet\" type=\"text/css\"  href=\"views/css/productTemplate1.css\">\n  <link rel=\"stylesheet\" type=\"text/css\"  href=\"views/css/productTemplate2.css\">\n  <link rel=\"stylesheet\" type=\"text/css\"  href=\"views/css/productTemplate3.css\">\n  <link rel=\"stylesheet\" type=\"text/css\"  href=\"views/css/productTemplate4.css\">\n  <link rel=\"stylesheet\" type=\"text/css\"  href=\"views/css/imageContainer.css\">\n  <link rel=\"stylesheet\" type=\"text/css\"  href=\"views/css/skuStyles.css\">\n  <style>\n    /* CSS styles go here */\n  </style>\n</head>\n<body>\n  {{#each pages}}\n    <div class=\"page\">\n      <div class=\"page-header\">{{collectionName}}</div>\n      <div class=\"page-content\">{{{content}}}</div>\n      <div class=\"page-footer\">{{page}}</div>\n    </div>\n  {{/each}}\n</body>\n</html>\n`;\n\n// Define the Product template for Products with 1 Variant\nconst productImage1Template = `\n  <div class=\"product-image {{#if hasJpgImage}}image-jpg{{/if}}\" style=\"{{#if hasLifestyleImage}}background-image: url('{{images.[0]}}'); background-color: {{lifestyleBgColor images.[0]}};{{else}} background-color: {{productBgColor variants.[0].images.[0]}}{{/if}}\">\n    <div class=\"image-container\">\n      <img src=\"{{variants.[0].images.[0]}}\" alt=\"{{productName}}\" />\n    </div>\n  </div>\n`;\n\nconst productInfo1Template = `\n  <div class=\"product-info\">\n    <h2 class=\"product-name\">{{productName}}</h2>\n    <div class=\"prices\">\n      <div class=\"wholesale-price\">Wholesale: $ {{wholesalePrice}}</div>\n      <div class=\"retail-price\">Retail: $ {{retailPrice}}</div>\n      <div class=\"min-qty\">Min: {{minimumOrderQuantity}}</div>\n    </div>\n    <div class=\"sku\">{{sku}}</div>\n    <div class=\"product-description\">{{{productDescription}}}</div>\n    <div class=\"product-variants {{#if use1x2Grid}}grid-1x2{{/if}}\">\n      {{#each imageTemplates}}\n        {{{this}}}\n      {{/each}}\n    </div>\n  </div>\n`;\n\nconst product1ImageTemplate = `\n<div class=\"variant\">\n  <div class=\"image-container\">\n    <img src=\"{{this}}\" alt=\"Product Image\" />\n  </div>\n</div>\n`;\n\nconst productTemplateLeft1 = `\n<div class=\"product product-1-variant product-baseSku-{{baseSku}} content-block {{#if hasLifestyleImage}}imageType-lifestyle{{/if}}\">\n  ${productImage1Template}\n  ${productInfo1Template}\n</div>\n`;\n\nconst productTemplateRight1 = `\n<div class=\"product product-1-variant product-baseSku-{{baseSku}} content-block {{#if hasLifestyleImage}}imageType-lifestyle{{/if}}\">\n  ${productInfo1Template}\n  ${productImage1Template}\n</div>\n`;\n\n// Define the Product template for Products with 2-7 Variants\nconst productImage2Template = `\n  <div class=\"product2-image {{#if hasJpgImage}}image-jpg{{/if}}\" style=\"{{#if hasLifestyleImage}}background-image: url('{{images.[0]}}'); background-color: {{lifestyleBgColor images.[0]}};{{else}} background-color: {{productBgColor variants.[0].images.[0]}}{{/if}}\">\n    <div class=\"image-container\">\n    <img src=\"{{variants.[0].images.[0]}}\" alt=\"{{productName}}\" />\n    </div>\n    {{#unless hasLifestyleImage}}\n      <div class=\"sku\">{{variants.0.option1Value}}</br>{{variants.0.sku}}</div>\n    {{/unless}}\n  </div>\n`;\n\nconst productInfo2Template = `\n<div class=\"product2-info\">\n  <h2 class=\"product-name\">{{productName}}</h2>\n  <div class=\"prices\">\n    <div class=\"wholesale-price\">Wholesale: $ {{wholesalePrice}}</div>\n    <div class=\"retail-price\">Retail: $ {{retailPrice}}</div>\n    <div class=\"min-qty\">Min: {{minimumOrderQuantity}}</div>\n  </div>\n  <div class=\"product-description\">{{{productDescription}}}</div>\n  <div class=\"product2-variants {{#if use1x2Grid}}grid-1x2{{/if}}\">\n    {{#if hasLifestyleImage}}\n      {{#each variants}}\n          {{{variantTemplate}}}\n      {{/each}}\n    {{else}}\n      {{#each variants}}\n        {{#if @index}}\n          {{{variantTemplate}}}\n        {{/if}}\n      {{/each}}\n    {{/if}}\n  </div>\n</div>\n`;\n\nconst productTemplateLeft2 = `\n<div class=\"product product2 product-baseSku-{{baseSku}} {{#if hasLifestyleImage}}imageType-lifestyle{{/if}}\">\n  ${productImage2Template}\n  ${productInfo2Template}\n</div>\n`;\n\nconst productTemplateRight2 = `\n<div class=\"product product2 product-baseSku-{{baseSku}} {{#if hasLifestyleImage}}imageType-lifestyle{{/if}}\">\n  ${productInfo2Template}\n  ${productImage2Template}\n</div>\n`;\n\nconst variantTemplate = `\n<div class=\"variant\">\n  <div class=\"image-container\">\n    <img src=\"{{images.[0]}}\" alt=\"{{sku}} - {{option1Value}}\" />\n  </div>\n  <div class=\"sku\">{{option1Value}}</br>{{sku}}</div>\n</div>\n`;\n\n// Define the Product template for Products with 7-8 Variants\nconst productTemplate3 = `\n<div class=\"product3-variants\">\n  {{#each variants}}\n    {{{variantTemplate}}}\n  {{/each}}\n</div>\n`;\n\n// Define the Product template for Products with 9+ Variants\nconst productTemplate4 = `\n<div class=\"product4-variants\">\n  {{#each variants}}\n    {{{variantTemplate}}}\n  {{/each}}\n</div>\n`;\n\n// Compile the templates\nconst compiledPageTemplate = Handlebars.compile(pageTemplate);\nconst compiledProductLeftTemplates = [\n  Handlebars.compile(productTemplateLeft1),\n  Handlebars.compile(productTemplateLeft2),\n  Handlebars.compile(productTemplate3),\n  Handlebars.compile(productTemplate4),\n];\n\nconst compiledProductRightTemplates = [\n  Handlebars.compile(productTemplateRight1),\n  Handlebars.compile(productTemplateRight2),\n  Handlebars.compile(productTemplate3),\n  Handlebars.compile(productTemplate4),\n];\n\nconst compiledVariantTemplate = Handlebars.compile(variantTemplate);\n\nconst compiledProduct1ImageTemplate = Handlebars.compile(product1ImageTemplate);\n\nexport { compiledPageTemplate, compiledProductLeftTemplates, compiledProductRightTemplates, compiledVariantTemplate, compiledProduct1ImageTemplate };"
  },
  {
    "filePath": "createPages.js",
    "contents": "import { compiledProductLeftTemplates, compiledProductRightTemplates, compiledVariantTemplate, compiledProduct1ImageTemplate } from \"./compileTemplates.js\";\nimport { bgTemplate } from \"./staticTemplate.js\";\n\n// Global variables for this module\nlet pageIndex = 1;\nlet pageSections = [];\nlet collectionName;\nconst pages = [];\n\n// Create pages from the product list\nfunction createPages(productsWithVariants) {\n\n  // Build the page sections list\n  productsWithVariants.forEach((product, index) => {\n    generatePageSections(product);\n  });\n\n  if (pageSections.length === 1) {\n    insertPage();\n  }\n\n  return pages;\n}\n  \n//split a product into the number of needed page sections\nfunction generatePageSections(product) {\n  const variantsCount = product.variants.length;\n\n  // only use the product images in the thumbnail positions on productTemplate1\n  if (variantsCount === 1 || variantsCount >= 8 || (variantsCount === 7 && product.hasLifestyleImage)) {\n    product.imageTemplates = [];\n    product.images.forEach((image, index) => {\n      if (product.hasLifestyleImage && index === 0) {\n        // don't show the lifestyle image twice\n        return;\n      }\n      product.imageTemplates.push(compiledProduct1ImageTemplate(image));\n    });\n\n    // add the variant image to the grid images if the product has a lifestyle image\n    if (variantsCount === 1 && product.hasLifestyleImage) {\n      product.imageTemplates.push(compiledProduct1ImageTemplate(product.variants[0].images[0]));      \n    }\n\n    // use the 1x2 grid if there are 2 or less images\n    if (product.imageTemplates.length <= 2) {\n      product.use1x2Grid = true;\n    }\n\n    pageSections.push({\n        content: selectTemplate(0)(product),\n        collectionName: product.productType\n    });\n    checkInsertPage();\n    // remove that variant from the array\n    // product.variants.shift();\n  }\n\n  if ((variantsCount >= 2 && variantsCount <= 4) || (variantsCount === 5 && !product.hasLifestyleImage)) {\n      // Render variant templates and add them to the product object\n      product.variants.forEach((variant) => {\n          variant.variantTemplate = compiledVariantTemplate(variant);\n      });\n\n      if ((product.hasLifestyleImage && variantsCount <= 2) || (!product.hasLifestyleImage && variantsCount === 3)) {\n        product.use1x2Grid = true;\n      }\n\n      pageSections.push({\n          content: selectTemplate(1)(product),\n          collectionName: product.productType\n      });\n\n      checkInsertPage();\n\n  } else if ((variantsCount >= 5 && variantsCount <= 6) || (variantsCount === 7 && !product.hasLifestyleImage)){\n    // Render variant templates and add them to the product object\n    product.variants.forEach((variant) => {\n      variant.variantTemplate = compiledVariantTemplate(variant);\n    });\n\n    pageSections.push({\n      content: selectTemplate(1)(product),\n      collectionName: product.productType\n    });\n\n    checkInsertPage();\n  } else if ((variantsCount >= 7 && variantsCount <= 8) || (variantsCount === 9 && !product.hasLifestyleImage)) {\n    while (product.variants.length > 0) {\n      const subVariants = product.variants.splice(0, 8);\n      subVariants.forEach((variant) => {\n        variant.variantTemplate = compiledVariantTemplate(variant);\n      });\n      const subProduct = { ...product, variants: subVariants };\n      pageSections.push({\n          content: selectTemplate(2)(subProduct),\n          collectionName: product.productType\n      });\n      checkInsertPage();\n    }\n  } else if (variantsCount >= 9) {\n    while (product.variants.length > 0) {\n      const subVariants = product.variants.splice(0, 18);\n      subVariants.forEach((variant) => {\n        variant.variantTemplate = compiledVariantTemplate(variant);\n      });\n      const subProduct = { ...product, variants: subVariants };\n      pageSections.push({\n          content: selectTemplate(3)(subProduct),\n          collectionName: product.productType\n      });\n      checkInsertPage();\n    }\n  }\n\n  return;\n}\n\n// \nfunction selectTemplate(version) {\n  let selectedTemplate;\n\n  //determine if the product-image content should be on the right or left of the page\n  if (pageIndex % 2 === 1) {\n    selectedTemplate = compiledProductLeftTemplates[version];\n  } else {\n    selectedTemplate = compiledProductRightTemplates[version];\n  }\n\n  return selectedTemplate;\n}\n\nfunction checkInsertPage() {\n  if (pageSections.length === 2) {\n    insertPage();\n  }\n}\n\nfunction insertPage() {\n  const content = pageSections[0].content + '\\n' + (pageSections[1] && pageSections[1].content);\n  const collectionName = pageSections[0].collectionName;\n  const page = {\n    collectionName,\n    content,\n    page: pageIndex\n  };\n  pages.push(page);\n\n  //update the utility variables\n  pageIndex++;\n  pageSections = [];\n}\n\nexport { createPages };"
  },
  {
    "filePath": "createPages_gpt.js",
    "contents": "import {\n    compiledProductLeftTemplates,\n    compiledProductRightTemplates,\n    compiledVariantTemplate,\n    compiledProduct1ImageTemplate,\n  } from \"./compileTemplates.js\";\n  import { bgTemplate } from \"./staticTemplate.js\";\n  \n  // Global variables for this module\n  let pageIndex = 1;\n  let pageSections = [];\n  const pages = [];\n  \n  // Create pages from the product list\n  function createPages(productsWithVariants) {\n    // Build the page sections list\n    productsWithVariants.forEach(generatePageSections);\n  \n    if (pageSections.length === 1) {\n      insertPage();\n    }\n  \n    return pages;\n  }\n  \n  // Split a product into the number of needed page sections\n  function generatePageSections(product) {\n    const variantsCount = product.variants.length;\n  \n    // Generate image templates for products with 1 or 7+ variants\n    if (\n      variantsCount === 1 ||\n      variantsCount >= 8 ||\n      (variantsCount === 7 && product.hasLifestyleImage)\n    ) {\n      product.imageTemplates = generateImageTemplates(product);\n      product.use1x2Grid = product.imageTemplates.length <= 2;\n  \n      pageSections.push({\n        content: selectTemplate(0)(product),\n        collectionName: product.productType,\n      });\n  \n      checkInsertPage();\n    }\n  \n    // Generate variant templates for products with 2-4 variants, or 5 variants without lifestyle image\n    if (\n      (variantsCount >= 2 && variantsCount <= 4) ||\n      (variantsCount === 5 && !product.hasLifestyleImage)\n    ) {\n      addVariantTemplates(product, 1);\n    }\n  \n    // Generate variant templates for products with 5-6 variants, or 7 variants without lifestyle image\n    if (\n      (variantsCount >= 5 && variantsCount <= 6) ||\n      (variantsCount === 7 && !product.hasLifestyleImage)\n    ) {\n      addVariantTemplates(product, 1);\n    }\n  \n    // Generate variant templates for products with 7-8 variants, or 9 variants without lifestyle image\n    if (\n      (variantsCount >= 7 && variantsCount <= 8) ||\n      (variantsCount === 9 && !product.hasLifestyleImage)\n    ) {\n      addVariantTemplates(product, 2, 8);\n    }\n  \n    // Generate variant templates for products with 9+ variants\n    if (variantsCount >= 9) {\n      addVariantTemplates(product, 3, 18);\n    }\n  \n    return;\n  }\n  \n  // Generate image templates for a product\n  function generateImageTemplates(product) {\n    return product.images\n      .filter((_, index) => !(product.hasLifestyleImage && index === 0))\n      .map(compiledProduct1ImageTemplate);\n  }\n  \n  // Add variant templates for a product\n  function addVariantTemplates(product, templateIndex, maxVariants) {\n    let subVariants = product.variants;\n  \n    if (maxVariants) {\n      subVariants = product.variants.splice(0, maxVariants);\n    }\n  \n    subVariants.forEach(\n      (variant) => (variant.variantTemplate = compiledVariantTemplate(variant))\n    );\n  \n    if (product.hasLifestyleImage || !product.imageTemplates) {\n      product.use1x2Grid = true;\n    }\n  \n    pageSections.push({\n      content: selectTemplate(templateIndex)({\n        ...product,\n        variants: subVariants,\n      }),\n      collectionName: product.productType,\n    });\n  \n    checkInsertPage();\n  }\n  \n  // Select a template\n  function selectTemplate(version) {\n    // Determine if the product-image content should be\n  "
  },
  {
    "filePath": "filterOnlineOrderingProducts.js",
    "contents": "function filterOnlineOrderingProducts(products) {\n    return products.filter(product => product.onlineOrdering === true || product.onlineOrdering === 'true');\n  }\n\nexport { filterOnlineOrderingProducts };"
  },
  {
    "filePath": "groupProductsWithVariants.js",
    "contents": "import { addProductImages, addVariantImages } from \"./addImagePaths.js\";\n\nfunction groupProductsWithVariants(products) {\n    const productsByName = {};\n  \n    products.forEach((product) => {\n      const productName = product.productName;\n      const variant = {\n        sku: product.sku,\n        'option1Value': product.option1Value,\n        'option2Value': product.option2Value,\n        images: []\n      };\n\n      addVariantImages(variant);\n\n      if (!productsByName[productName]) {\n        addProductImages(product);\n        \n        product.productDescription = shortenDescription(product.productDescription);\n        product.productDescription = removeHTMLSpans(product.productDescription);\n        product.productDescription = cropAtBreak(product.productDescription);\n\n        const [subfolder1, subfolder2] = product.sku.split('-');\n        const baseSku = `${subfolder1}-${subfolder2}`;\n        const use1x2Grid = false;\n\n        // set a flag if the product image is the header image and is a jpg\n        const jpgRegex = /\\.(jpg|jpeg)$/i;\n        if (!product.hasJpgLifestyleImage && jpgRegex.test(variant.images[0])) {\n          product.hasJpgImage = true;\n        }\n    \n        productsByName[productName] = {\n          ...product,\n          baseSku,\n          use1x2Grid,\n          variants: [],\n        };\n      }\n  \n      productsByName[productName].variants.push(variant);\n    });\n  \n    const productsWithVariants = Object.values(productsByName);\n    return productsWithVariants;\n};   \n\nfunction shortenDescription(description) {\n  const regex = /<p>(.*?)<\\/p>/;\n  const matches = description.match(regex);\n  const firstParagraph = matches && matches[1];\n  return firstParagraph || description;\n}\n\nfunction removeHTMLSpans(html) {\n  const regex = /<\\/?span[^>]*>/gi;\n  const result = html.replace(regex, '');\n  return result;\n}\n\nfunction cropAtBreak(inputString) {\n  const regex = /<br\\s*\\/?>/;\n  const trimmedString = inputString.split(regex)[0];\n  return trimmedString;\n}\n\nexport { groupProductsWithVariants };"
  },
  {
    "filePath": "helpers/backgroundColorHelper.js",
    "contents": "function isJpg(imagePath) {\n\n    // check if the image is a jpg format\n    const jpgRegex = /\\.(jpg|jpeg)$/i;\n\n    return jpgRegex.test(imagePath);\n}\n\nconst lightColors = [\n    'honeydew',\n    'lightgoldenrodyellow',\n    'linen',\n    'ivory',\n    'aliceblue',\n    'lightcyan'\n];\n\nconst brightColors = [\n    'lemonchiffon',\n    'wheat',\n    'khaki',\n    'aquamarine',\n    'bisque',\n    'palegoldenrod',\n    'burlywood',\n    'peachpuff'\n];\n\nfunction hash(imagePath, colorOptions) {\n    // Use the imagePath to create a consistent random index for the colorOptions array\n    const hash = imagePath.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    const colorIndex = hash % colorOptions.length;\n    const color = colorOptions[colorIndex];\n    return color;\n}\n\nfunction lifestyleBgColorHelper(imagePath) {\n    let colorOptions = brightColors;\n    if (isJpg(imagePath)) {\n        colorOptions = lightColors;\n    } \n\n    const color = hash(imagePath, colorOptions);\n  \n    return color;\n}\n\nfunction productBgColorHelper(imagePath) {\n    if (typeof imagePath === 'undefined') {\n        return 'none';\n    }\n    let colorOptions = brightColors;\n    if (isJpg(imagePath)) {\n        colorOptions = ['white'];\n    } \n  \n    const color = hash(imagePath, colorOptions);\n  \n    return color;\n}\n\n  export { lifestyleBgColorHelper, productBgColorHelper };"
  },
  {
    "filePath": "package.json",
    "contents": "{\n  \"dependencies\": {\n    \"csv-parser\": \"^3.0.0\",\n    \"fast-csv\": \"^4.3.6\",\n    \"fs\": \"^0.0.1-security\",\n    \"handlebars\": \"^4.7.7\",\n    \"path\": \"^0.12.7\"\n  },\n  \"type\": \"module\",\n  \"name\": \"build-a-html-catalog-from-products-csv-and-images\",\n  \"version\": \"1.0.0\",\n  \"main\": \"catalog_generator.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"summary\": \"summary_generator.js\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"description\": \"\"\n}\n"
  },
  {
    "filePath": "renameProperties.js",
    "contents": "function toCamelCase(str) {\n    return str\n      .replace(/\\s*\\([^)]*\\)\\s*/g, ' ') // Remove parentheses and their contents, and condense spaces to a single space\n      .trim() // Remove leading and trailing spaces\n      .toLowerCase() // Convert the entire string to lowercase\n      .replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, function (match, index) {\n        if (+match === 0) return ''; // or if (/\\s+/.test(match)) for white spaces\n        return index === 0 ? match.toLowerCase() : match.toUpperCase();\n      });\n  }\n\n  function renameProperties(obj) {\n    for (const prop in obj) {\n      if (obj.hasOwnProperty(prop)) {\n        const camelCasedProp = toCamelCase(prop);\n        if (prop !== camelCasedProp) {\n          obj[camelCasedProp] = obj[prop];\n          delete obj[prop];\n        }\n      }\n    }\n    return obj;\n  }\n\nexport { renameProperties };"
  },
  {
    "filePath": "staticTemplate.js",
    "contents": "// Define the bg separator content\nconst bgTemplate =  `\n<div class=\"page-separator-bg\">&nbsp; </div>\n`;\n\nexport { bgTemplate };"
  }
]